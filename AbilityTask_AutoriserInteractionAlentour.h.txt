// Copyright Epic Games, Inc. All Rights Reserved.
#pragma once

#include "Abilities/Tasks/AbilityTask.h"

#include "Delegates/Delegate.h"


#include "AbTask_AutoriseInteractionAutour.generated.h"

class UGameplayAbility;
class UObject;
struct FFrame;
struct FGameplayAbilitySpecHandle;
struct FObjectKey;


DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FInteractableObjectsChangeEvent, const TArray<FInteractionOption>&, InteractableOptions);


UCLASS()
class LYRAGAME_API UAbTask_AutoriseInteractionAutour : public UAbilityTask
{
	GENERATED_UCLASS_BODY()

		virtual void Activate() override;

	/** Wait until an overlap occurs. This will need to be better fleshed out so we can specify game specific collision requirements */
	UFUNCTION(BlueprintCallable, Category = "Ability|Tasks", meta = (HidePin = "OwningAbility", DefaultToSelf = "OwningAbility", BlueprintInternalUseOnly = "TRUE"))
		static UAbTask_AutoriseInteractionAutour* DonnerAbiliteObjetProche(UGameplayAbility* OwningAbility, float InteractionScanRange, float InteractionScanRate);

private:

	virtual void OnDestroy(bool AbilityEnded) override;

	void QueryInteractables();

	float InteractionScanRange = 100;
	float InteractionScanRate = 0.100;

	FTimerHandle QueryTimerHandle;

	TMap<FObjectKey, FGameplayAbilitySpecHandle> InteractionAbilityCache;

	TArray<FInteractionOption> CurrentOptions2;




public:

	UPROPERTY(BlueprintAssignable)
		FInteractableObjectsChangeEvent InteractableObjectsChanged;
};